diff --git a/Gaudi/GaudiCommonSvc/src/StatusCodeSvc.cpp b/Gaudi/GaudiCommonSvc/src/StatusCodeSvc.cpp
index 18533123..fa4e1fe2 100644
--- a/Gaudi/GaudiCommonSvc/src/StatusCodeSvc.cpp
+++ b/Gaudi/GaudiCommonSvc/src/StatusCodeSvc.cpp
@@ -80,10 +80,17 @@ void StatusCodeSvc::regFnc( const std::string& fnc, const std::string& lib )
   // A StatusCode instance may be create internally by ROOT dictionaries and,
   // of course, it's not checked, so here we whitelist a few library names
   // that are known to produce spurious reports.
-  if ( m_dict &&
-       ( lib.compare( lib.length() - 7, 7, "Dict.so" ) == 0 || lib.compare( lib.length() - 8, 8, "Cling.so" ) == 0 ||
-         lib.compare( lib.length() - 7, 7, "Core.so" ) == 0 ) ) {
-    return;
+  if ( m_dict ) {
+    // ROOT's library names can end with either ".so" or ".so.x.y" with x.y the ROOT version in use
+    if ( lib.compare( lib.length() - 3, 3, ".so" ) == 0 ) {
+      if ( lib.compare( lib.length() - 7, 4, "Dict" ) == 0 || lib.compare( lib.length() - 8, 5, "Cling" ) == 0 ||
+           lib.compare( lib.length() - 7, 4, "Core" ) == 0 ) {
+        return;
+      }
+    } else if ( lib.rfind( "Dict.so" ) != std::string::npos || lib.rfind( "Cling.so" ) != std::string::npos ||
+                lib.rfind( "Core.so" ) != std::string::npos ) {
+      return;
+    }
   }
   // this appears only with gcc 4.9...
   if ( fnc == "_PyObject_GC_Malloc" ) return;
